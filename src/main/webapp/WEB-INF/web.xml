<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee" 
         xmlns:web="http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee">

	<display-name>Spring MVC Web Application</display-name>
	<!-- http://localhost:8080/SpringMVC/ -->

	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<!-- Note 1: spring-servlet.xml defines the beans that are related only 
		to that servlet. Here it is the dispatcher servlet. So, your Spring MVC controllers 
		must be defined in this file. There is nothing wrong in defining all the 
		beans in the spring-servlet.xml if you are running only one servlet in your 
		web application. -->
		
	<servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- Note 2: applicationContext.xml defines the beans that are shared among 
		all the servlets. If your application have more than one servlet, then defining 
		the common resources in the applicationContext.xml would make more sense. -->

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring-servlet.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

</web-app>