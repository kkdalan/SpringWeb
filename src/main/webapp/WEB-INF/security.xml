<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	       http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.0.3.xsd">

	<!-- The setting indicates that all URLs within our application to be secured, 
	     requiring the role ROLE_USER to access them. -->
	<!--
	Notes:
		1.The <http> element is the parent for all web-related namespace functionality. 
		2.The <intercept-url> element defines a pattern which is matched against the URLs 
		  of incoming requests using an ant path style syntax.
		3.The access attribute defines the access requirements for requests matching the given pattern. 
		  With the default configuration, this is typically a comma-separated list of roles.
    	4.Using <http-basic /> within <http>'s tags shows the msgbox to input username/password.  
    -->

	<http auto-config='true'>
	    <intercept-url pattern='/**' access='ROLE_ADMIN, ROLE_SUPERVISOR' requires-channel="any"/>
		
		<session-management>
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
		</session-management>
	</http>


	<!-- The configuration above defines two users, their passwords and their 
		roles within the application (which will be used for access control) -->
    <!-- 
    Notes: 3 types to perform authentication 
    	Using the <authentication-provider> element means that the user information 
    	will be used by the authentication manager to process authentication requests.
	    
	    1.In-Memory Authentication
	      ex:<user-service> 
			     <user name="ezpay" password="ezpay" authorities="ROLE_USER, ROLE_ADMIN" />
				 <user name="vip" password="vip" authorities="ROLE_USER" /> 
			 </user-service> 
	    
	    2.In-Memory Authentication with external properties file
	      ex:<user-service id="userDetailsService" properties="users.properties" />
	    
	    3.Using DaoAuthenticationProvider injectd by Jdbc datasource to authenticate.
	      But the user, authorities tables schema should follow the JdbcDaoImpl query string.
	      Ref: https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-schema
	-->
	<authentication-manager>
		<authentication-provider ref="daoAuthenticationProvider" />
	</authentication-manager>
	
	<beans:bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userDetailsService" />
	</beans:bean>

	<beans:bean id="userDetailsService"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="enableGroups" value="true" />
	    <beans:property name="enableAuthorities" value="true" />
	</beans:bean>
	
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
		<beans:property name="url"
			value="jdbc:sqlserver://127.0.0.1:1433;databaseName=security" />
		<beans:property name="username" value="sa" />
		<beans:property name="password" value="0000" />
	</beans:bean>
	
</beans:beans>